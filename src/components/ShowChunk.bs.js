// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../Utils.bs.js";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as ChunkInfo from "./ChunkInfo.bs.js";
import * as ModuleItem from "./ModuleItem.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactNativeWeb from "react-native-web";

var styles = ReactNativeWeb.StyleSheet.create({
      centeredContent: {
        alignItems: "center"
      }
    });

function ShowChunk(Props) {
  var json = Props.json;
  var chunkID = Props.chunkID;
  var __x = Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(Js_json.decodeObject(json), (function (__x) {
                  return Js_dict.get(__x, "chunks");
                })), Js_json.decodeArray), []);
  var chunks = __x.map(function (prim) {
        return prim;
      });
  var optionalMatchingChunk = chunks.find(function (chunk) {
        return chunk.id === chunkID;
      });
  var optionalMatchingChunk$1 = optionalMatchingChunk === undefined ? undefined : Caml_option.some(optionalMatchingChunk);
  if (optionalMatchingChunk !== undefined) {
    var data = React.useMemo((function () {
            var __x = optionalMatchingChunk$1.modules;
            return __x.sort(Utils.sortBySize);
          }), [optionalMatchingChunk$1]);
    var partial_arg = Caml_option.some(undefined);
    return React.createElement(ReactNativeWeb.View, {
                style: {
                  flex: 1
                },
                children: null
              }, React.createElement(ReactNativeWeb.View, {
                    style: styles.centeredContent,
                    children: React.createElement(ChunkInfo.make, {
                          activeChunk: optionalMatchingChunk$1
                        })
                  }), React.createElement(ReactNativeWeb.FlatList, {
                    data: data,
                    renderItem: (function (param) {
                        return ModuleItem.moduleItem(partial_arg, param);
                      }),
                    style: {
                      flex: 1
                    }
                  }));
  }
  var chunkIdStr = String(chunkID);
  var typeofChunkId = typeof chunkID;
  return "no matching chunk. " + chunkIdStr + " " + typeofChunkId;
}

var make = ShowChunk;

export {
  styles ,
  make ,
  
}
/* styles Not a pure module */

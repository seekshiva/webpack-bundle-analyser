// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Text from "./Text.bs.js";
import * as Utils from "../Utils.bs.js";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as ModuleItem from "./ModuleItem.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactNative from "react-native";
import * as Standalone from "prettier/standalone";

function ShowModule$ModuleInfo(Props) {
  var activeModule = Props.activeModule;
  var subModules = activeModule.modules;
  var modulesCountInfo;
  if (subModules == null) {
    modulesCountInfo = "";
  } else {
    var len = String(subModules.length);
    modulesCountInfo = "(" + len + " modules)";
  }
  var moduleId = Belt_Option.mapWithDefault(Belt_Option.map(Caml_option.nullable_to_opt(activeModule.id), (function (prim) {
              return String(prim);
            })), "unknownId", (function (x) {
          return "#" + x;
        }));
  var moduleSize = String(activeModule.size);
  var moduleReason = Belt_Option.getWithDefault(Caml_option.nullable_to_opt(activeModule.reason), "");
  return React.createElement(ReactNative.View, {
              children: React.createElement($$Text.make, {
                    children: "Module #" + moduleId + ": [size " + moduleSize + "] " + moduleReason + " " + modulesCountInfo
                  })
            });
}

var ModuleInfo = {
  make: ShowModule$ModuleInfo
};

var styles = ReactNative.StyleSheet.create({
      centeredContent: {
        alignItems: "center"
      }
    });

function ShowModule$ShowModuleInternal(Props) {
  var matchingModule = Props.matchingModule;
  var subModules = React.useMemo((function () {
          var arr = matchingModule.modules;
          var arr$1 = (arr == null) ? [] : arr;
          var __x = arr$1.map(function (prim) {
                return prim;
              });
          return __x.sort(Utils.sortBySize);
        }), [matchingModule]);
  var renderItem = React.useCallback((function (arg) {
          return ModuleItem.moduleItem(Caml_option.some(matchingModule), arg);
        }), [matchingModule]);
  var source = matchingModule.source;
  return React.createElement(ReactNative.View, {
              style: {
                flex: 1
              },
              children: null
            }, React.createElement(ReactNative.View, {
                  style: styles.centeredContent,
                  children: React.createElement(ShowModule$ModuleInfo, {
                        activeModule: matchingModule
                      })
                }), (source == null) ? null : React.createElement(ReactNative.ScrollView, {
                    style: {
                      flex: 1
                    },
                    children: React.createElement($$Text.make, {
                          children: Standalone.format(source, {
                                plugins: []
                              })
                        })
                  }), subModules.length !== 0 ? React.createElement(ReactNative.FlatList, {
                    data: subModules,
                    renderItem: renderItem,
                    style: {
                      flex: 1
                    }
                  }) : null);
}

var ShowModuleInternal = {
  styles: styles,
  make: ShowModule$ShowModuleInternal
};

function ShowModule(Props) {
  var json = Props.json;
  var moduleID = Props.moduleID;
  var optionalSubModuleIndex = Props.subModuleIndex;
  var __x = Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(Js_json.decodeObject(json), (function (__x) {
                  return Js_dict.get(__x, "modules");
                })), Js_json.decodeArray), []);
  var modules = __x.map(function (prim) {
        return prim;
      });
  var optionalMatchingModule = modules.find(function (webpackModule) {
        var id = webpackModule.id;
        if (id == null) {
          return false;
        } else {
          return (
                  (id == null) ? undefined : Caml_option.some(id)
                ) === moduleID;
        }
      });
  var optionalMatchingModule$1 = optionalMatchingModule === undefined ? undefined : Caml_option.some(optionalMatchingModule);
  if (optionalMatchingModule === undefined) {
    return "no matching chunk. " + String(moduleID) + " " + typeof moduleID;
  }
  var matchingModule;
  if (optionalSubModuleIndex !== undefined) {
    var subModulesArr = Belt_Option.getWithDefault(Caml_option.nullable_to_opt(optionalMatchingModule$1.modules), []);
    matchingModule = optionalSubModuleIndex < subModulesArr.length ? Caml_array.get(subModulesArr, optionalSubModuleIndex) : optionalMatchingModule$1;
  } else {
    matchingModule = optionalMatchingModule$1;
  }
  return React.createElement(ShowModule$ShowModuleInternal, {
              matchingModule: matchingModule
            });
}

var make = ShowModule;

export {
  ModuleInfo ,
  ShowModuleInternal ,
  make ,
  
}
/* styles Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Tabs from "./components/Tabs.bs.js";
import * as $$Text from "./components/Text.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ChunkList from "./components/ChunkList.bs.js";
import * as ShowChunk from "./components/ShowChunk.bs.js";
import * as ModuleList from "./components/ModuleList.bs.js";
import * as ShowModule from "./components/ShowModule.bs.js";
import * as ReactNative from "react-native";
import * as ReactRouterDom from "react-router-dom";

function useStatJSON(param) {
  var match = React.useState(function () {
        return null;
      });
  var setStatJSON = match[1];
  React.useEffect((function () {
          var __x = import("/Users/juspay/Code/juspay/rescript-euler-dashboard/stat.json");
          __x.then(function (json) {
                Curry._1(setStatJSON, (function (param) {
                        return json.default;
                      }));
                return Promise.resolve(null);
              });
          
        }), []);
  return match[0];
}

var styles = ReactNative.StyleSheet.create({
      container: {
        flex: 1,
        backgroundColor: "#fff",
        height: window.innerHeight
      },
      centeredContent: {
        alignItems: "center"
      }
    });

function App$LoadedApp(Props) {
  var json = Props.json;
  var match = React.useState(function () {
        return "chunks";
      });
  var setTab = match[1];
  var currentTab = match[0];
  return React.createElement(ReactNative.View, {
              style: styles.container,
              children: null
            }, React.createElement(ReactNative.View, {
                  style: styles.centeredContent,
                  children: null
                }, React.createElement($$Text.make, {
                      children: "Open up App.js to start working on your app!"
                    }), React.createElement(ReactRouterDom.Route, {
                      render: (function (param) {
                          return React.createElement(Tabs.make, {
                                      currentTab: currentTab,
                                      setTab: setTab,
                                      match: param.match
                                    });
                        })
                    })), React.createElement(ReactRouterDom.Switch, {
                  children: null
                }, React.createElement(ReactRouterDom.Route, {
                      path: "/",
                      exact: true,
                      render: (function (param) {
                          return React.createElement(ChunkList.make, {
                                      json: json,
                                      match: param.match
                                    });
                        })
                    }), React.createElement(ReactRouterDom.Route, {
                      path: "/chunks",
                      exact: true,
                      render: (function (param) {
                          return React.createElement(ChunkList.make, {
                                      json: json,
                                      match: param.match
                                    });
                        })
                    }), React.createElement(ReactRouterDom.Route, {
                      path: "/chunks/:chunkID",
                      exact: true,
                      render: (function (param) {
                          return React.createElement(ShowChunk.make, {
                                      json: json,
                                      match: param.match
                                    });
                        })
                    }), React.createElement(ReactRouterDom.Route, {
                      path: "/modules",
                      exact: true,
                      render: (function (param) {
                          return React.createElement(ModuleList.make, {
                                      json: json,
                                      match: param.match
                                    });
                        })
                    }), React.createElement(ReactRouterDom.Route, {
                      path: "/modules/:moduleID",
                      exact: true,
                      render: (function (param) {
                          return React.createElement(ShowModule.make, {
                                      json: json,
                                      match: param.match
                                    });
                        })
                    }), React.createElement(ReactRouterDom.Route, {
                      path: "/modules/:moduleID/:subModuleIndex",
                      exact: true,
                      render: (function (param) {
                          return React.createElement(ShowModule.make, {
                                      json: json,
                                      match: param.match
                                    });
                        })
                    })));
}

var LoadedApp = {
  make: App$LoadedApp
};

function initializeBodyStyle(param) {
  document.body.style.margin = 0;
  document.body.style["overflow-y"] = "hidden";
  document.body.style.position = "fixed";
  document.body.style.display = "flex";
  document.body.style.flexDirection = "column";
  document.body.style.width = "100%";
  document.body.style.height = "100%";
  
}

function App(Props) {
  var nullableJson = useStatJSON(undefined);
  window.json = nullableJson;
  console.log("json", nullableJson);
  if (nullableJson == null) {
    return React.createElement(ReactNative.ActivityIndicator, {});
  } else {
    return React.createElement(ReactRouterDom.BrowserRouter, {
                children: React.createElement(App$LoadedApp, {
                      json: nullableJson
                    })
              });
  }
}

initializeBodyStyle(undefined);

var make = App;

var $$default = App;

export {
  useStatJSON ,
  styles ,
  LoadedApp ,
  initializeBodyStyle ,
  make ,
  $$default ,
  $$default as default,
  
}
/* styles Not a pure module */

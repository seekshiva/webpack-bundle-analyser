// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Tabs from "./components/Tabs.bs.js";
import * as $$Text from "./components/Text.bs.js";
import * as React from "react";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as ChunkList from "./components/ChunkList.bs.js";
import * as ShowChunk from "./components/ShowChunk.bs.js";
import * as ModuleList from "./components/ModuleList.bs.js";
import * as ShowModule from "./components/ShowModule.bs.js";
import * as ReactNativeWeb from "react-native-web";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function useStatJSON(param) {
  return React.useState(function () {
                return null;
              })[0];
}

var styles = ReactNativeWeb.StyleSheet.create({
      container: {
        flex: 1,
        backgroundColor: "#fff",
        height: window.innerHeight
      },
      centeredContent: {
        alignItems: "center"
      }
    });

function App$LoadedApp(Props) {
  var json = Props.json;
  var match = React.useState(function () {
        return "chunks";
      });
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match$1 = url.path;
  var tmp;
  if (match$1) {
    switch (match$1.hd) {
      case "chunks" :
          var match$2 = match$1.tl;
          if (match$2) {
            if (match$2.tl) {
              tmp = "unknown page";
            } else {
              var optionalChunkID = Belt_Int.fromString(match$2.hd);
              tmp = optionalChunkID !== undefined ? React.createElement(ShowChunk.make, {
                      json: json,
                      chunkID: optionalChunkID
                    }) : "chunkId is expected to be int type";
            }
          } else {
            tmp = React.createElement(ChunkList.make, {
                  json: json
                });
          }
          break;
      case "modules" :
          var match$3 = match$1.tl;
          if (match$3) {
            var match$4 = match$3.tl;
            var moduleID = match$3.hd;
            if (match$4) {
              if (match$4.tl) {
                tmp = "unknown page";
              } else {
                var optionalModuleID = Belt_Int.fromString(moduleID);
                var optionalSubModuleIndex = Belt_Int.fromString(match$4.hd);
                if (optionalModuleID !== undefined) {
                  var tmp$1 = {
                    json: json,
                    moduleID: optionalModuleID
                  };
                  if (optionalSubModuleIndex !== undefined) {
                    tmp$1.subModuleIndex = optionalSubModuleIndex;
                  }
                  tmp = React.createElement(ShowModule.make, tmp$1);
                } else {
                  tmp = "moduleID needs to be of int type";
                }
              }
            } else {
              var optionalModuleID$1 = Belt_Int.fromString(moduleID);
              tmp = optionalModuleID$1 !== undefined ? React.createElement(ShowModule.make, {
                      json: json,
                      moduleID: optionalModuleID$1
                    }) : "no module id found in url";
            }
          } else {
            tmp = React.createElement(ModuleList.make, {
                  json: json
                });
          }
          break;
      default:
        tmp = "unknown page";
    }
  } else {
    tmp = React.createElement(ChunkList.make, {
          json: json
        });
  }
  return React.createElement(ReactNativeWeb.View, {
              style: styles.container,
              children: null
            }, React.createElement(ReactNativeWeb.View, {
                  style: styles.centeredContent,
                  children: null
                }, React.createElement($$Text.make, {
                      children: "Open up App.js to start working on your app!"
                    }), React.createElement(Tabs.make, {
                      currentTab: match[0],
                      setTab: match[1]
                    })), tmp);
}

var LoadedApp = {
  make: App$LoadedApp
};

function initializeBodyStyle(param) {
  document.body.style.margin = 0;
  document.body.style["overflow-y"] = "hidden";
  document.body.style.position = "fixed";
  document.body.style.display = "flex";
  document.body.style.flexDirection = "column";
  document.body.style.width = "100%";
  document.body.style.height = "100%";
  
}

function App(Props) {
  var nullableJson = useStatJSON(undefined);
  window.json = nullableJson;
  console.log("json", nullableJson);
  if (nullableJson == null) {
    return React.createElement(ReactNativeWeb.ActivityIndicator, {});
  } else {
    return React.createElement(App$LoadedApp, {
                json: nullableJson
              });
  }
}

initializeBodyStyle(undefined);

var make = App;

var $$default = App;

export {
  useStatJSON ,
  styles ,
  LoadedApp ,
  initializeBodyStyle ,
  make ,
  $$default ,
  $$default as default,
  
}
/* styles Not a pure module */
